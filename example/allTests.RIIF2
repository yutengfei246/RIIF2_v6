component FAST_CPU;

// For simple model, MTTF is static constant
  fail_mode CHIP_FAIL;
  assign CHIP_FAIL'description = "Permanent hard chip failure. " ;
  assign CHIP_FAIL'unit = MTTF;
  assign CHIP_FAIL'rate = 1000000;

  parameter VOLTAGE : float := 1.0;               // Voltage at transistor
  assign VOLTAGE'unit = volts;
  assign VOLTAGE'min = 0.8;
  assign VOLTAGE'max = 1.2;

endcomponent
component IMPROVED_SRAM_MEMORY;
// --------------------- Parameter Declaration ----------------------------
  parameter VOLTAGE : float := 1.0;               // voltage at transistor
  assign VOLTAGE'unit = volts;
  assign VOLTAGE'min = 0.8;       // Valid range over which RAM is characterized
  assign VOLTAGE'max = 1.2;

  parameter NEUTRON_ENV_DEF : NEUTRON_ENV;  // parameter of type NEUTRON_ENV_DEF

// --------------------- Constant Declaration -----------------------------
  constant A_DIFF : float := 3.2;        // Constant obtained from layout
  constant Q_COL_EFF : float := 0.6;     // Represent Qcrit/Qcoll
  constant MBE_RATIO : float := 0.25;    // For now, simple ratio of MBEs to SBEs

// --------------------- Define Failure Modes -----------------------------
// Neutron SBE failures are proportional to Qcrit/Qeff. Qcrit depends on V.
// For simple example, only consider Neutron SER.
  fail_mode SBE;
  assign SBE'description = "Single bit soft error, alpha and neutron.";
  assign SBE'unit = FITS;
  assign SBE'rate = NEUTRON_ENV'REL_FLUX *
                    A_DIFF * EXP( - VOLTAGE / Q_COL_EFF);

// For this simple example, MBE is fixed ratio of SBE
  fail_mode MBE;
  assign MBE'description = "Multi-bit soft error, alpha and neutron.";
  assign MBE'unit = FITS;
  assign MBE'rate = SBE'RATE * MBE_RATIO;

// For simple model, MTTF is static constant
  fail_mode CHIP_FAIL;
  assign CHIP_FAIL'description = "Permanent hard chip failure.";
  assign CHIP_FAIL'unit = MTTF;

endcomponent


component SIMPLE_CPU_BOARD;
  // --------------------- Constant Declaration -----------------------------
  constant NUM_RAMS : integer := 17;
  constant CHIP_VOLTAGE : float := 1.0;
  assign CHIP_VOLTAGE'unit = VOLTS;
  constant MEMORY_UTILIZATION : float := 0.75;

  // --------------------- Instantiate Components ---------------------------
  child_component FAST_CPU CPU;            // Single CPU
  assign CPU'VOLTAGE = CHIP_VOLTAGE;       // Propagate parameters to children

  child_component SIMPLE_SRAM MEMORY[1:NUM_RAMS];      // 17 memory chips
  assign MEMORY[1 .. NUM_RAMS].VOLTAGE = CHIP_VOLTAGE;

// ----------------- Define Failure Modes for the Board ----------------------
// If there is an MBE in any memory, the board will reboot.
  fail_mode REBOOT;
  assign REBOOT'description = "Reboot due to MBE";
  assign REBOOT'unit = FIT;
  assign REBOOT'rate = MEMORY_UTILIZATION *
                        agg_single_fail( MEMORY'MBE[1:NUM_RAMS] );

// If either the CPU or >1 RAMs have a chip-fail, boards must be replaced.
  fail_mode REPLACE_BOARD;
  assign REPLACE_BOARD'description = "Hard failure causes board replacement.";
  assign REPLACE_BOARD'unit = MTTF;
  assign REPLACE_BOARD'rate = agg_single_fail(
                             CPU'CHIP_FAIL,
                             agg_gt_n_fail( 1, MEMORY'CHIP_FAIL[1:NUM_RAMS] ) );

// Explicitly declare that SBEs in the memory have no effect
  assign null'rate = agg_single_fail( MEMORY'SBE[1:NUM_RAMS] );

endcomponent
component CY7C1263XC18 implements SYNCSRAM_TEMPLATE,FLIP_CHIP_TEMPLATE;

 set SYNCSRAM_TEMPLATE.NAME = "CY/C1263XC18";
 set MANUFACTURE = "CYPRESS";
 set CORE_VOLTAGE = 1.8;
 set NUM_BITS = 37748736;
 set CLK_Speed = 633;
 set FLIP_CHIP_TEMPLATE.NAME = "165-LBGA";
 set NUM_BUMPS = 165;
 set PACKAGE_TEMP'MIN = 0 ;
 set PACKAGE_TEMP'MAX = 70;
 set RAD_FM[SBU]'RATE = 0;
 set RAD_FM[SSAP]'RATE = 0;
 endcomponent
 // Specify neutron environment based on JESD89a
 // Taken from appendex A.3

 environment NEUTRON_ENV_DEF;
 // Input to the environment is the location and solar activity
   input parameter LOCATION : enum { NYC, LOS_ALAMOS, TOKYO } := NYC;
   input parameter SUN_ACTIVE : enum { LOW, PEAK, AVG } := AVG;
 // Ouput of the environment is the relative neutron flux
   output parameter REL_FLUX : float;

   assign REL_FLUX = ( LOCATION == NYC ) ?
                       ( ( SUN_ACTIVE == AVG ) ? 1.0 :
                         ( SUN_ACTIVE == LOW ) ? 0.927 : 1.073 ) :
                     ( LOCATION == LOS_ALAMOS ) ?
                       ( ( SUN_ACTIVE == AVG ) ? 5.60 :
                         ( SUN_ACTIVE == LOW ) ? 5.15 : 5.60 ) :
                     ( LOCATION == TOKYO ) ?
                       ( ( SUN_ACTIVE == AVG ) ? 0.66 :
                         ( SUN_ACTIVE == LOW ) ? 0.62 : 0.64 ) :
                         -1; // not defined

 endenvironment // NEUTRON_ENV_DEF
template FLIP_CHIP_TEMPLATE;

//all flip chip packages must contain the following info
abstract constant NAME:string;
abstract parameter NUM_BUMP:integer;
abstract parameter PACKAGE_TEMP: float;
impose PACKAGE_TEMP'UNIT = CELSIUS;

//all flip-chip package have these failure mechanisms
abstract fail_mode OPEN_BUMP;
abstract fail_mode DIE_CRACK;
endtemplate
component mCom;

parameter mPar : float := 10.0;
parameter mPar[] : float  := {o, p, q } ;
parameter mPar[Instance] ;
parameter mPar[2:2] : float;
parameter mPar'attr : float ;
parameter mPar[instance]'attr : int := 10;
parameter mPar[]'attribute : float ;
parameter mPar[2:2]'attribute : float ;

parameter mpar := {oi,oio,oo,ooio } ;
parameter mPar : table;

fail_mode mfailMode[];
fail_mode mfailMode[instance];
fail_mode mfailMode;
fail_mode mfailMode[2:2];

fail_mode mfailMode[instalce]'attribtue;
fail_mode mfailMode'attribute;
fail_mode mfailMode[]'attribute;
fail_mode mfailMode[2:2]'attribtue;


child_component PP mCC;
child_component PP mCC[];
child_component PP mCC[instance];
child_component PP mCC[2:2];

child_component PP mCC'attribute;
child_component PP mCC[]'attribute;
child_component PP mCC[Isntance]'attribute;
child_component PP mCC[2:2]'attibute;

endcomponent
// Example of generic requirements
requirement HIGH_AVAIL_REQUIREMENTS;
  assert REBOOT'rate < 100;
  assert HARD_FAIL'MTTF < 100000;
endrequirement // HIGH_AVAIL_REQUIREMENTS
component SIMPLE_SRAM;
// --------------------- Parameter Declaration ----------------------------
  parameter VOLTAGE : float := 1.0;               // Voltage at transistor
  assign VOLTAGE'unit = volts;
  assign VOLTAGE'min = 0.8;       // Valid range over which RAM is characterized
  assign VOLTAGE'max = 1.2;

// --------------------- Constant Declaration -----------------------------
  constant A_DIFF : float := 3.2;        // Constant obtained from layout
  constant Q_COL_EFF : float := 0.6;     // Represent Qcrit/Qcoll
  constant MBE_RATIO : float := 0.25;    // For now, simple ratio of MBEs to SBEs

// --------------------- Define Failure Modes -----------------------------
// Neutron SBE failures are proportional to Qcrit/Qeff. Qcrit depends on V.
// In this example, only consider Neutron SER.
  fail_mode SBE;
  assign SBE'description = "Single bit soft error, alpha and neutron. " ;
  assign SBE'unit = FITS;
  assign SBE'rate = A_DIFF * EXP( ( - VOLTAGE / Q_COL_EFF ) ) ;

  assert SBE'rate < 1000;

// In this example, MBE is fixed ratio of SBE
  fail_mode MBE;
  assign MBE'description = "Multi-bit soft error, alpha and neutron. " ;
  assign MBE'unit = FITS;
  assign MBE'rate = SBE'rate * MBE_RATIO;

// For simple model, MTTF is static constant
  fail_mode CHIP_FAIL;
  assign CHIP_FAIL'description = "Permanent hard chip failure. " ;
  assign CHIP_FAIL'unit = MTTF;
  assign CHIP_FAIL'rate = 1000000;

endcomponent
component SRAM_MEMORY extends SRAM_MEMORY_TEMPLATE;
  // ------------------ Define Valid Parameter Ranges ---------------------------
  assign VOLTAGE'min = 0.8;       // Valid range over which RAM is characterized
  assign VOLTAGE'max = 1.2;

  // --------------------- Constant Declaration -----------------------------
  constant A_DIFF : float := 3.2;        // Constant obtained from layout
  constant Q_COL_EFF : float := 0.6;     // Represent Qcrit/Qcoll
  constant MBE_RATIO : float := 0.25;    // For now, simple ratio of MBEs to SBEs

  // --------------------- Specify Failure Rates  -----------------------------
  assign SBE'unit = FITS;
  assign SBE'rate = NEUTRON_ENV'REL_FLUX * A_DIFF * EXP( - VOLTAGE / Q_COL_EFF) ;

  assign MBE'unit = FITS;
  assign MBE'rate = SBE'RATE * MBE_RATIO;

  assign CHIP_FAIL'unit = MTTF;
  assign CHIP_FAIL'rate = 1000000;

endcomponent
component SRAM_MEMORY_TEMPLATE;
// --------------------- Parameter Declaration ----------------------------
  parameter VOLTAGE : float;                // voltage at transistor
  parameter NEUTRON_ENV_DEF : NEUTRON_ENV;  // parameter of type NEUTRON_ENV_DEF

// --------------------- Define Failure Modes -----------------------------
  fail_mode SBE;
  assign SBE'description = "Single bit soft error.";
  fail_mode MBE;
  assign MBE'description = "Multi bit soft error.";
  fail_mode CHIP_FAIL;
  assign CHIP_FAIL'description = "Permanent hard chip failure." ;

endcomponent
template SRAM_TEMPLATE;

// All SRAMs nyst defube voltage, temperature and size
abstract constant   NAME : string;
abstract constant  MANUFATURER : string;
abstract parameter CORE_VOLTAGE : float;
abstract parameter NUM_BITS : integer;

// All SRAMs must have radiation induced failure modes
abstract fail_mode RAD_FM[];
// All SRAMs must have permanent failure modes
abstract fail_mode PER_FM[];

abstract fail_mode RAD_FM[SBU]'RATE;
impose RAD_FM[SBU]'UNITS = FITS;
abstract fail_mode RAD_FM[MBU]'RATE;
impose RAD_FM[MBU]'UNIT = FITS;
abstract fail_mode RAD_FM[SEFI]'RATE;
impose RAD_FM[SEFI]'UNIT = FITS;
abstract fail_mode RAD_FM[SEFI]'RATE;
impose RAD_FM[SEFI]'UNIT = FITS;
abstract fail_mode RAD_FM[SSAF]'RATE;
impose RAD_FM[SSAF]'UNIT = FITS;

endtemplate
template SW_COMPONENT;
    //all programs must define the name,size...

    abstract parameter NAME:string;
    abstract parameter SIZE:integer;
    abstract parameter LOOPS: integer;
    abstract parameter PROTECTION: enum{NONE, VAR_DUP};
    abstract parameter READ_ACCESS: integer;
    abstract parameter WRITE_ACCESS: integer;
    abstract platform execute_on;

    //List of possible SFB considered in our library
    abstract constant SFB_LIST := { INT_TIME, UNDETECTABLE,
                    EARLY, LATE, FULL_UNRESPONSIVE, PARTIAL_UNRESPONSIVE,
                    RESPONSIVE, DATA_BENIGN, NO_DATA, EDC, NON_EDC };

    // Timing constraints depending on the workload
    abstract parameter TIMING_CONSTRAINTS : table;
    impose TIMING_CONSTRAINTS'HEADERS = {SFM_TYPE,SFM,
                                    OCCURRING_SFB,OCCURRING_SFN_RATE};
endtemplate
template SYNCSRAM_TEMPLATE extends SRAM_TEMPLATE;

abstract parameter      CKL_Speed : integer;
impose  CLK_speed'units= MHZ ;

endtemplate
component VADD implements SW_COMPONENT;
    set NAME = "Vector ADD";
    set SIZE = 524;
    set SIZE'UNITS = instructions;
    set PROTECTIONS = NODE;
    constant NUMBER_OF_ITEMS :integer:= 10000;
    set READ_ACCESS = 76*NUMBER_OF_ITEMS / 10000;
    set WRITE_ACCESS = 75*NUMBER_OF_ITEMS / 10000;
    set LOOPS = 3;
    set executed_on = VECTORCALC_CORE;
    child_component cpu VPRINT ;

    assign TIMING_CONSTRAINTS'ITEMS = {
        [ "permanent", "WRONG_DATA", SFB_ITEMS, {0.893, 0.107, 0, 0, 0.891, 0.042, 0.067, 0.413, 0.109,0.052,0.426 } ],
        [ "permanent", "WRONG_DATA", SFB_ITEMS, {0.893, 0.107, 0, 0, 0.891, 0.042, 0.067, 0.413, 0.109,0.052,0.426 } ],
        [ "permanent", "WRONG_DATA", SFB_ITEMS, {0.893, 0.107, 0, 0, 0.891, 0.042, 0.067, 0.413, 0.109,0.052,0.426 } ],
        [ "permanent", "WRONG_DATA", SFB_ITEMS, {0.893, 0.107, 0, 0, 0.891, 0.042, 0.067, 0.413, 0.109,0.052,0.426 } ]

    };
endcomponent
component VADD_VARIABLE_DUPLICATION_VER1 extends VADD;
    set NAME = "vector ADD_with_Variable_Duplication";
    set PROTECTION = VAR_DUP;
    assign TIMING_CONSTRAINS'ITEMS = {
        (PROTECTION ==VAR_DUP)?
        ["TEST_BENCH1",self+0.001,self+0.2,self+0.0015]:
        ["TEST_BENCH1",self,self,self ],
        (PROTECTION == VAR_DUP)?
        ["TEST_BENCH1",self+0.001,self+0.2,self+0.0015]:
        ["TEST_BENCH1",self,self,self ]
    };
endcomponent
component VADD_VARIABLE_DUPLICATION_VER2 extends VADD;

assign TIMING_CONSTRAINS'ITEMS[#][EXEC_TIME]=
    (PROTECTION == VAR_DUP)? self + 0.001 :self ;
assign TIMING_CONSTRAINS'ITEMS[#][MAX_TIME]=
    (PROTECTION == VAR_DUP)? self+0.2 : self;
assign TIMING_CONSTRAINS'ITEMS[#][AVG_TIME]=
    (PROTECTION == VAR_DUP)? self + 0.0015 : self ;
endcomponent
component VECTORCALC_CORE;
// An hardware component performing vectorial calculations

//parameter fail_mode SBU;
fail_mode SBU;
assign SBU'RATE = 10; //obtained from radiation tests

parameter SW_FM: table;
assign SW_FM'HEADERS = {FAILMODE,SFM,RATE};
assign SW_FM'ITEMS = { //obtained from fault injection
    ["SUB", "WRONG_DATA", 0.3*SBU'RATE],
    ["SBU", "WRONG_INSTRUCTION",0.2*SBU'RATE]
    } ;
endcomponent