component exampleComponent;

parameter aParameter[] : integer ;
parameter aParameter[ram] := 10 ;

parameter thePara[1:5] : integer;


// the aParameter1 definitions ...
parameter aParameter1[1:4] : integer := [10,20,30,40] ; // the aParameter1 definitions 2...
assign aParameter1[1..4] = [1,2,3,4];

endcomponent


component myCom1 extends exampleComponent;

parameter aps : float := 1.0 ;

endcomponent

component theCom;

child_component myCom1 cc[];
child_component myCom1 cc[cc1] ;

fail_mode oneFailModes[];
fail_mode oneFailModes[indx];

endcomponent

template SRAM_TEMPLATE;

    // All SRAMs must define voltage, temperature and size
    abstract constant   NAME : string;
    abstract constant  MANUFACTURE : string;
    abstract parameter CORE_VOLTAGE : float;
    abstract parameter NUM_BITS : integer;

    // All SRAMs must have radiation induced failure modes
    abstract fail_mode RAD_FM[];
    // All SRAMs must have permanent failure modes
    abstract fail_mode PER_FM[];

    abstract fail_mode RAD_FM[SBU]'RATE;
    impose RAD_FM[SBU]'UNIT = FITS;

    abstract fail_mode RAD_FM[MBU]'RATE;
    impose RAD_FM[MBU]'UNIT = FITS;
    abstract fail_mode RAD_FM[SEFI]'RATE;
    impose RAD_FM[SEFI]'UNIT = FITS;
    abstract fail_mode RAD_FM[SEFI]'RATE;
    impose RAD_FM[SEFI]'UNIT = FITS;
    abstract fail_mode RAD_FM[SSAF]'RATE;
    impose RAD_FM[SSAF]'UNIT = FIT;

endtemplate